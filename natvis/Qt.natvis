<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- https://msdn.microsoft.com/en-us/library/jj620914.aspx -->

  <Type Name="QBasicAtomicInt">
    <DisplayString>{_q_value}</DisplayString>
  </Type>
  <Type Name="QString" ExcludeView="raw">
    <DisplayString Condition="!d->size">Empty</DisplayString>
    <DisplayString>{d->data,su}</DisplayString>
    <StringView>d->data,su</StringView>
    <Expand>
      <Item Name="[size]">d->size</Item>
      <Item Name="[ref]">d->ref._q_value</Item>
      <ArrayItems>
        <Size>d->size</Size>
        <ValuePointer>(wchar_t*)d->data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="QList&lt;*&gt;">
    <AlternativeType Name="QQueue&lt;*&gt;"></AlternativeType>
    <DisplayString Condition="d->end == d->begin">Empty</DisplayString>
    <DisplayString>{{ size={d->end - d->begin} }}</DisplayString>
    <Expand>
      <Item Name="[size]">d->end - d->begin</Item>
      <Item Name="[ref]">d->ref._q_value</Item>
      <ArrayItems Condition="int(sizeof($T1)) &lt;= int(sizeof(void*))">
        <Size>d->end - d->begin</Size>
        <ValuePointer>($T1*)(d->array + d->begin)</ValuePointer>
      </ArrayItems>
      <IndexListItems Condition="int(sizeof($T1)) &gt; int(sizeof(void*))">
        <Size>d->end - d->begin</Size>
        <ValueNode>(*($T1*)((d->array + d->begin)[$i]))</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QVector&lt;*&gt;">
    <AlternativeType Name="QStack&lt;*&gt;"></AlternativeType>
    <Expand>
      <Item Name="[size]">d->size</Item>
      <Item Name="[referenced]">d->ref._q_value</Item>
      <ArrayItems>
        <Size>d->size</Size>
        <ValuePointer>($T1*)(d + 1)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="QByteArray">
    <DisplayString>{{ size={d->size} }}</DisplayString>
    <StringView>d->data</StringView>
    <Expand>
      <Item Name="[size]">d->size</Item>
      <Item Name="[alloc]">d->alloc</Item>
      <Item Name="[ref]">d->ref._q_value</Item>
      <ArrayItems>
        <Size>d->size</Size>
        <ValuePointer>d->data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="QMapNode&lt;*,*&gt;">
    <DisplayString>({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]">key</Item>
      <Item Name="[value]">value</Item>
    </Expand>
  </Type>

  <Type Name="QMap&lt;*,*&gt;">
    <AlternativeType Name="QMultiMap&lt;*,*&gt;"/>
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref._q_value</Item>
      <TreeItems>
        <Size>d-&gt;size</Size>
        <HeadPointer>d-&gt;forward[0]</HeadPointer>
        <LeftPointer>backward</LeftPointer>
        <RightPointer>forward[0]</RightPointer>
        <ValueNode>*((QMapNode&lt;$T1,$T2&gt;*)this)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,*&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
      <Item Name="[value]" Condition="next != 0">value</Item>
    </Expand>
  </Type>

  <Type Name="QHash&lt;*,*&gt;">
    <AlternativeType Name="QMultiHash&lt;*,*&gt;"/>
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref._q_value</Item>
      <IndexListItems>
        <Size>d-&gt;numBuckets</Size>
        <ValueNode>*((QHashNode&lt;$T1,$T2&gt;*)d-&gt;buckets[$i])</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,QHashDummyValue&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">({key})</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
    </Expand>
  </Type>

  <Type Name="QSet&lt;*&gt;">
    <DisplayString>{{ size = {q_hash.d-&gt;size} }}</DisplayString>
    <Expand>
      <ExpandedItem>q_hash</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QRegion">
    <DisplayString ModuleName="QtCored4.dll" Optional="1" Condition="d &amp;&amp; d->qt_rgn">{{ size={((QtCored4.dll!QRegionPrivate*)d->qt_rgn)->numRects} }}</DisplayString>
    <DisplayString ModuleName="QtCore4.dll" Optional="1" Condition="d &amp;&amp; d->qt_rgn">{{ size={((QtCore4.dll!QRegionPrivate*)d->qt_rgn)->numRects} }}</DisplayString>
    <DisplayString>{{ empty }}</DisplayString>
    <Expand>
      <Item Name="ref" Condition="d">d->ref</Item>
      <Item Name="rgn" Condition="d">d->rgn</Item>
      <Item ModuleName="QtCored4.dll" Optional="1" Name="qt_rgn" Condition="d">(QtCored4.dll!QRegionPrivate*)d->qt_rgn</Item>
      <Item ModuleName="QtCore4.dll" Optional="1" Name="qt_rgn" Condition="d">(QtCore4.dll!QRegionPrivate*)d->qt_rgn</Item>
    </Expand>
  </Type>

  <Type Name="QPainter">
    <!--<Version Name="QtCored4.dll"/>-->
    <Expand>
      <ExpandedItem Optional="1" ModuleName="QtCored4.dll">(QtCored4.dll!QPainterPrivate*)d_ptr.d</ExpandedItem>
      <ExpandedItem Optional="1" ModuleName="QtCore4.dll">(QtCore4.dll!QPainterPrivate*)d_ptr.d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QImageEffects">
    <Expand>
      <ExpandedItem>(QtCored4.dll!QImageEffectsPrivate*)d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QPen">
    <Expand>
      <ExpandedItem>(QtCored4.dll!QPenPrivate*)d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QScopedPointer&lt;*,*&gt;">
    <Expand>
      <ExpandedItem>d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QPainterPath">
    <Expand>
      <ExpandedItem>d_ptr</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QBrush">
    <Expand>
      <ExpandedItem>d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QTextFormat">
    <Expand>
      <Item Name="format_type">{(QTextFormat::FormatType)format_type}</Item>
      <ExpandedItem>(QtCored4.dll!QTextFormatPrivate*)d.d</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QDomNamedNodeMap">
    <Expand>
      <ExpandedItem Optional="true">(QtCored4.dll!QDomNamedNodeMapPrivate*)impl</ExpandedItem>
      <ExpandedItem Optional="true">(QtCored.dll!QDomNamedNodeMapPrivate*)impl</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QDomNode">
    <Expand>
      <ExpandedItem Optional="true">(QtCored4.dll!QDomNodePrivate*)impl</ExpandedItem>
      <ExpandedItem Optional="true">(QtCored.dll!QDomNodePrivate*)impl</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="QDomNodeList">
    <Expand>
      <ExpandedItem Optional="true">(QtCored4.dll!QDomNodeListPrivate*)impl</ExpandedItem>
      <ExpandedItem Optional="true">(QtCored.dll!QDomNodeListPrivate*)impl</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QVariant">
    <!--Region DisplayString QVariant-->

    <!--<DisplayString Condition="d.type == QMetaType::UnknownType">Invalid</DisplayString>-->
    <DisplayString Condition="d.type == QMetaType::Bool">{d.data.b}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Int">{d.data.i}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::UInt">{d.data.u}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::LongLong">{d.data.ll}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::ULongLong">{d.data.ull}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Double">{d.data.d}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QChar">{d.data.c}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QVariantMap">
      {*((QMap&lt;QString,QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QVariantList">
      {*((QList&lt;QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QString">
      {*((QString*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QStringList">
      {*((QStringList*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QByteArray">
      {*((QByteArray*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QBitArray">
      {*((QBitArray*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QDate">
      {*((QDate*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QTime">
      {*((QTime*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QDateTime">DateTime</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QUrl">Url</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QLocale">Locale</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QRect">
      {*((QRect*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QRectF">
      {*((QRectF*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QSize">
      {*((QSize*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QSizeF">
      {*((QSizeF*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QLine">
      {*((QLine*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QLineF">
      {*((QLineF*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPoint">
      {*((QPoint*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPointF">
      {*((QPointF*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QRegExp">RegExp</DisplayString>
    <!--<DisplayString Condition="d.type == QMetaType::QRegularExpression">RegularExpression</DisplayString>-->
    <DisplayString Condition="d.type == QMetaType::QVariantHash">
      {*((QHash&lt;QString,QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))}
    </DisplayString>
    <DisplayString Condition="d.type == QMetaType::QEasingCurve">EasingCurve</DisplayString>
    <!--<DisplayString Condition="d.type == QMetaType::QUuid">Uuid</DisplayString>
		<DisplayString Condition="d.type == QMetaType::QModelIndex">ModelIndex</DisplayString>-->
    <DisplayString Condition="d.type == QMetaType::LastCoreType">LastCoreType</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QFont">Font</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPixmap">Pixmap</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QBrush">Brush</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QColor">Color</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPalette">Palette</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QImage">Image</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPolygon">Polygon</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QRegion">Region</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QBitmap">Bitmap</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QCursor">Cursor</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QKeySequence">KeySequence</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QPen">Pen</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QTextLength">TextLength</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QTextFormat">TextFormat</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QMatrix">Matrix</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QTransform">Transform</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QMatrix4x4">Matrix4x4</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QVector2D">Vector2D</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QVector3D">Vector3D</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QVector4D">Vector4D</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QQuaternion">Quaternion</DisplayString>
    <!--<DisplayString Condition="d.type == QMetaType::QPolygonF">PolygonF</DisplayString>-->
    <DisplayString Condition="d.type == QMetaType::QIcon">Icon</DisplayString>
    <DisplayString Condition="d.type == QMetaType::LastGuiType">LastGuiType</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QSizePolicy">SizePolicy</DisplayString>
    <DisplayString Condition="d.type == QMetaType::User">UserType</DisplayString>
    <DisplayString Condition="d.type == 0xffffffff">LastType</DisplayString>
    <DisplayString>Invalid</DisplayString>
    <!--End region DisplayString QVariant-->

    <!--Region DisplayView QVariant-->

    <StringView Condition="d.type == QMetaType::QChar">d.data.c</StringView>

    <StringView Condition="d.type == QMetaType::QString">
      *((QString*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
    </StringView>

    <StringView Condition="d.type == QMetaType::QByteArray">
      *((QByteArray*)(d.is_shared ? d.data.shared-&gt;ptr
      : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
    </StringView>

    <!--End region DisplayView QVariant-->

    <!--Region Expand QVariant-->

    <Expand>
      <ExpandedItem Condition="d.type == QMetaType::QVariantMap">
        *((QMap&lt;QString,QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
        : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
      </ExpandedItem>
      <ExpandedItem Condition="d.type == QMetaType::QVariantList">
        *((QList&lt;QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
        : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
      </ExpandedItem>
      <ExpandedItem Condition="d.type == QMetaType::QString">
        *((QString*)(d.is_shared ? d.data.shared-&gt;ptr
        : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
      </ExpandedItem>
      <ExpandedItem Condition="d.type == QMetaType::QStringList">
        *((QStringList*)(d.is_shared ? d.data.shared-&gt;ptr
        : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
      </ExpandedItem>
      <!--
			<ExpandedItem Condition="d.type == QMetaType::QByteArray">
				*((QByteArray*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QBitArray">
				*((QBitArray*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QDate">
				*((QDate*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QTime">
				*((QTime*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QRect">
				*((QRect*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QRectF">
				*((QRectF*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QSize">
				*((QSize*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QSizeF">
				*((QSizeF*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QLine">
				*((QLine*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QLineF">
				*((QLineF*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QPoint">
				*((QPoint*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QPointF">
				*((QPointF*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			<ExpandedItem Condition="d.type == QMetaType::QVariantHash">
				*((QHash&lt;QString,QVariant&gt;*)(d.is_shared ? d.data.shared-&gt;ptr
				: reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)))
			</ExpandedItem>
			-->
    </Expand>

    <!--End region Expand QVariant-->
  </Type>

  <Type Name="QMetaObject">
    <Expand>
      <Item Name="superdata">d.superdata</Item>
      <Synthetic Name="property">
        <DisplayString>{{ size={((QMetaObjectPrivate*)d.data)-&gt;propertyCount} }}</DisplayString>
        <Expand>
          <IndexListItems>
            <Size>((QMetaObjectPrivate*)d.data)-&gt;propertyCount</Size>
            <ValueNode>d.stringdata + d.data[((QMetaObjectPrivate*)d.data)-&gt;propertyData + 3 * $i]</ValueNode>
          </IndexListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="classInfo">
        <DisplayString>{{ size={((QMetaObjectPrivate*)d.data)-&gt;classInfoCount} }}</DisplayString>
        <Expand>
          <IndexListItems>
            <Size>((QMetaObjectPrivate*)d.data)-&gt;classInfoCount</Size>
            <ValueNode>d.stringdata + d.data[((QMetaObjectPrivate*)d.data)-&gt;classInfoData + 2 * $i]</ValueNode>
          </IndexListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

</AutoVisualizer>
